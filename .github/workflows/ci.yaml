name: Java CI - Enterprise Workflow

on:
  push:
    branches:
      - main

permissions:
  checks: write
  contents: read

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Run Checkstyle
        run: mvn checkstyle:check -Dcheckstyle.failOnViolation=false

      - name: Build and run tests
        run: mvn clean install

      - name: Upload Checkstyle report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: target/checkstyle-result.xml

      - name: Upload test results (JUnit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: target/surefire-reports/

      - name: Publish test summary
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

  code-quality-sonarqube:
    if: false
    name: SonarQube Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=csi-springboot-pharma-app \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Run SonarQube scan with Quality Gate check
        uses: SonarSource/sonarqube-scan-action@v2
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=csi-springboot-pharma-app
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.java.binaries=target/classes

          # args: >
          #   -Dsonar.qualitygate.wait=true

  trivy-fs-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Scan source code with Trivy and export report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          severity: CRITICAL,HIGH
          scan-ref: "."
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          output: "trivy-report.txt"

      - name: Upload Trivy report artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

  docker-build-and-scan:
    name: Docker Build and Scan
    runs-on: ubuntu-latest
    needs: [build-and-test,trivy-fs-scan]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ github.sha }}
          restore-keys: docker-

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker Image
        run: |
          USERNAME=$(echo "${{ secrets.GHCR_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG=ghcr.io/$USERNAME/springboot-app:${{ github.sha }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $IMAGE_TAG .

      - name: Scan Docker Image with Trivy and export report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          severity: CRITICAL,HIGH
          scan-ref: ${{ env.IMAGE_TAG }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          output: "trivy-image-report.txt"

      - name: Push Image to GHCR & ACR
        run: |
          USERNAME=$(echo "${{ secrets.GHCR_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          GHCR_TAG=ghcr.io/$USERNAME/springboot-app:${{ github.sha }}
          docker push $GHCR_TAG

  push-artifact-to-nexus:
    name: Push Artifact to Nexus
    runs-on: ubuntu-latest
    needs: docker-build-and-scan
    environment: dev

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set dynamic version (based on commit SHA)
        run: mvn versions:set -DnewVersion=1.0.0-dev-SNAPSHOT

      - name: üõ†Ô∏è Build Artifact (JAR)
        run: mvn clean package

      - name: Deploy to Nexus
        run: |
          mvn deploy \
            -DaltDeploymentRepository=nexus::default::http://${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}@98.70.35.194:8081/repository/maven-snapshots/


  slack-notify:
    runs-on: ubuntu-latest
    needs: push-artifact-to-nexus
    steps:
      - name: üì¢ Slack Notification (End of Pipeline)
        if: always()
        run: |
          STATUS="${{ job.status }}"
          
          # Construct URLs for JUnit, Trivy, and SonarQube
          JUNIT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          TRIVY_REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"

          # Define Slack message color and status-specific messages
          if [ "$STATUS" == "success" ]; then
            COLOR="good"
            MESSAGE="Deployment succeeded! üéâ"
            STATUS_ICON=":white_check_mark:"
          elif [ "$STATUS" == "failure" ]; then
            COLOR="danger"
            MESSAGE="Deployment failed! ‚ùå Please check the logs."
            STATUS_ICON=":x:"
          elif [ "$STATUS" == "cancelled" ]; then
            COLOR="warning"
            MESSAGE="Deployment was canceled! ‚ö†Ô∏è"
            STATUS_ICON=":warning:"
          elif [ "$STATUS" == "skipped" ]; then
            COLOR="gray"
            MESSAGE="Job was skipped. ‚è∏Ô∏è"
            STATUS_ICON=":pause_button:"
          else
            COLOR="gray"
            MESSAGE="Pipeline completed with status: $STATUS"
            STATUS_ICON=":question:"
          fi

          # Construct the payload with dynamic status and additional report links
          PAYLOAD="{
            \"text\": \"*CI/CD Pipeline - $STATUS* $STATUS_ICON\",
            \"attachments\": [
              {
                \"fallback\": \"Job Details\",
                \"color\": \"$COLOR\",
                \"fields\": [
                  {
                    \"title\": \"Repository\",
                    \"value\": \"${{ github.repository }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Branch\",
                    \"value\": \"${{ github.ref_name }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Job\",
                    \"value\": \"${{ github.job }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Commit\",
                    \"value\": \"<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\",
                    \"short\": false
                  },
                  {
                    \"title\": \"Author\",
                    \"value\": \"${{ github.actor }}\",
                    \"short\": true
                  },
                  {
                    \"title\": \"JUnit Test Results\",
                    \"value\": \"<${JUNIT_URL}|JUnit Test Reports>\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Trivy FS Scan Report\",
                    \"value\": \"<${TRIVY_REPORT_URL}|Trivy Report>\",
                    \"short\": true
                  },
                ]
              }
            ]
          }"

          # Send the notification to Slack
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" ${{ secrets.SLACK_WEBHOOK_URL }}
