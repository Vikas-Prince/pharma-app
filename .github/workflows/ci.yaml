name: Java CI - Enterprise Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  checks: write
  contents: read

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 💾 Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: 🛠️ Build and run tests
        run: mvn clean install

      - name: 📤 Upload test results (JUnit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: target/surefire-reports/

      - name: 📊 Publish test summary
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  gitleaks-scan:
    name: 🔐 Gitleaks Secret Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: 🔍 Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --verbose --redact

  
  # code-quality-sonarqube:
  #   name: 🧠 SonarQube Code Analysis
  #   runs-on: ubuntu-latest
  #   needs: build-and-test

  #   steps:
  #     - name: 📥 Checkout source code
  #       uses: actions/checkout@v4

  #     - name: ☕ Set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: 📊 Run SonarQube Analysis
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       run: |
  #         mvn clean verify sonar:sonar \
  #           -Dsonar.projectKey=<your_project_key> \
  #           -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
  #           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
  #     - name: 📊 Run SonarQube scan with Quality Gate check
  #       uses: SonarSource/sonarqube-scan-action@v2
  #       env:
  #           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #       with:
  #         args: >
  #           -Dsonar.projectKey=<your_project_key>
  #           -Dsonar.qualitygate.wait=true
  #           -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  trivy-fs-scan:
    name: 🛡️ Trivy Filesystem Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4

      - name: 🔍 Scan source code with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true


  
